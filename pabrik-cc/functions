#!/bin/bash

set -e

. $CC_DIR/init-variables

check_variable ARCH

do_chroot() {
    chroot $ROOTFS $@
}

clean_packages() {
    do_chroot apt-get --force-yes --yes clean 
    do_chroot apt-get --force-yes --yes autoremove
    rm -f $ROOTFS/var/lib/dpkg/*-old
    rm -f $ROOTFS/var/cache/debconf/*-old
}

mute_debconf() {
    DEBCONF_0=`echo get debconf/frontend | do_chroot debconf-communicate 2>/dev/null`
    DEBCONF_STATUS=`echo $DEBCONF_0|cut -f1 -d' '`
    DEBCONF_VALUE=`echo $DEBCONF_0|cut -f2 -d' '`

    echo set debconf/frontend Noninteractive | LC_ALL=C do_chroot debconf-communicate 2>/dev/null
}

unmute_debconf() {
    if [ -z $DEBCONF_VALUE ];then
        echo set debconf/frontend $DEBCONF_VALUE | LC_ALL=C do_chroot debconf-communicate 2>/dev/null
    fi
}

setup_diversion() {
    for file in $DIVERTS; do
        mkdir -p ${ROOTFS}/${file%/*}
        do_chroot mv /${file} /${file}.livecd
        cp ${ROOTFS}/bin/true ${ROOTFS}/$file
    done
}

teardown_diversion() {
    for file in $DIVERTS; do
        ls -ld ${ROOTFS}/${file} ${ROOTFS}/${file}.livecd || true
        rm -f ${ROOTFS}/${file}
        do_chroot mv /${file}.livecd /${file}
    done
}

setup_mounts() {
    cat << @@EOF > ${ROOTFS}/tmp/mount
mount
mount -t proc proc /proc
mount -t sysfs sys /sys
mount -t devpts devpts-live /dev/pts
@@EOF
    cat << @@EOF > ${ROOTFS}/tmp/umount
umount /dev/pts
umount /sys
umount /proc
@@EOF
    chmod +x ${ROOTFS}/tmp/mount ${ROOTFS}/tmp/umount
    do_chroot /tmp/mount
    MOUNTS=1
}

teardown_mounts() {
    do_chroot /tmp/umount
    rm $ROOTFS/tmp/mount
    rm $ROOTFS/tmp/umount
    unset MOUNTS
}

install_package() {
    setup_diversion
    setup_mounts
    mute_debconf
    echo "Installing $@"
    do_chroot apt-get install --force-yes --yes $@
    clean_packages
    unmute_debconf
    teardown_mounts
    teardown_diversion
}

install_package_unclean() {
    echo "Installing $@"
    do_chroot apt-get install --force-yes --yes $@
}

install_package_no_recommends() {
    install_package --no-install-recommends $@
}

remove_package() {
    setup_diversion
    setup_mounts
    mute_debconf
    echo "Removing $@"
    do_chroot apt-get purge --force-yes --yes $@
    clean_packages
    unmute_debconf
    teardown_mounts
    teardown_diversion
}

check_mounts_and_dismount() {
    mount
    if [ "x$MOUNTS" = "x1" ];then
        echo "Cleaning unclean mounts $MOUNTS"
        teardown_mounts
    fi
}

refresh_repository() {
    cp /etc/resolv.conf $ROOTFS/etc
    do_chroot apt-get update
    do_chroot apt-get --force-yes --yes upgrade
}

record_names() {
    while true;do
        read PACKAGE VERSION
        if [ -n "$PACKAGE" -a -n "$VERSION" -a -n "$1" -a -n $DISK_ID ];then
            mkdir -p $TMP/$DISK_ID-packages/$1/$PACKAGE
            touch $TMP/$DISK_ID-packages/$1/$PACKAGE/$VERSION
        else
            break
        fi
    done
}

list_rootfs_packages() {
    cat << @@EOF > ${ROOTFS}/tmp/xdpkg-query
#!/bin/bash
dpkg-query -W -f='\${Package} \${Version}\n' 
@@EOF
    chmod +x $ROOTFS/tmp/xdpkg-query
    do_chroot /tmp/xdpkg-query
    rm -f $ROOTFS/tmp/xdpkg-query
}

list_rootfs_packages_to_directory() {
    list_rootfs_packages | record_names current
}


list_rootfs_packages_to_file() {
    list_rootfs_packages > $1 
}

reconciliate_packages() {
    echo -n > $ROOTFS/tmp/list
    while true;do
        read PACKAGE VERSION
        if [ -n "$PACKAGE" -a -n "$VERSION" ];then
            # PACKAGE exists on current rootfs
            if [ -d $TMP/$DISK_ID-packages/current/$PACKAGE ];then
                if [ ! -f $TMP/$DISK_ID-packages/current/$PACKAGE/$VERSION ];then
                    echo "Marking $PACKAGE to be updated to version $VERSION"
                    # version is not same so we mark to upgrade/downgrade
                    mkdir -p $TMP/$DISK_ID-packages/update/$PACKAGE/
                    touch $TMP/$DISK_ID-packages/update/$PACKAGE/$VERSION
                    echo "$PACKAGE install" >> $ROOTFS/tmp/list
                    DO_UPDATE=1
                fi
            else
                echo "Marking $PACKAGE to be added"
                mkdir -p $TMP/$DISK_ID-packages/add/$PACKAGE/
                touch $TMP/$DISK_ID-packages/add/$PACKAGE/$VERSION
                echo "$PACKAGE install" >> $ROOTFS/tmp/list
                DO_ADD=1
            fi
        else
            break
        fi
    done
    for i in `find $TMP/$DISK_ID-packages/current/* -type d`;do
        PACKAGE=`basename $i`
        if [ -d $TMP/$DISK_ID-packages/update/$PACKAGE -o -d $TMP/$DISK_ID-packages/add/$PACKAGE ];then
            X=1 
        else
            DO_REMOVE=1
            echo "Marking $PACKAGE to be removed"
            mkdir -p $TMP/$DISK_ID-packages/remove/$PACKAGE
            echo "$PACKAGE purge" >> $ROOTFS/tmp/list
        fi
    done

    refresh_repository
    setup_diversion
    setup_mounts
    mute_debconf
    do_chroot dpkg --set-selections < $ROOTFS/tmp/list
    do_chroot apt-get --yes --force-yes -u dselect-upgrade
    clean_packages
    unmute_debconf
    teardown_mounts
    teardown_diversion
}

