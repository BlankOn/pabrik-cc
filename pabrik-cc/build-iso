#!/bin/bash

set -e

if [ -z $INTERNALCALL ];then
    echo "This script should not be called by you. Thanks for calling."
    exit 1
fi


PATH=$CC_DIR:$PATH

if [ -f $CONFIG ];then
    . $CONFIG
else
    echo "$CONFIG does not exist. Can't continue"
    exit 1
fi

. $CC_DIR/init-variables
# Reexport variables
export DISK_ID
export CONFIG
export TMP
export CC_DIR
export PATH
export INTERNALCALL

export VARIANT
export DIST
export MIRROR
export SCRIPT
export COMPONENTS
export PACKAGES
export KERNEL
export SQUASHFS
export ISOLINUX
export ISOLINUX_PATH
export CDVOLUME
export LIVE_PACKAGES
export LIVE_SYSTEM
export MAX_SIZE
export EXTRA_REPOSITORY
export EXTRA_REPOSITORY_HIDDEN 

export D_I_URL

check_variable DISK_ID 
check_variable TEMPLATES_PATH

if [ ! -d $TEMPLATES_PATH ];then
    echo "TEMPLATES_PATH is not defined in the CONFIG file"
    exit 1
fi

mkdir -p $TMP/$DISK_ID-publish
for ARCH in $ARCHS;do
    eval "export `eval "echo KERNEL_$ARCH"`"
    export ARCH=$ARCH
    echo "Building ISO for $ARCH $DIST"
    . $CC_DIR/functions
    unset CONTINUE
    echo "Debootstrap"
    /usr/bin/time $CC_DIR/debootstrap && CONTINUE=1
    if [ -z $CONTINUE ];then
        if [ -f $ROOTFS/debootstrap/debootstrap.log ];then
            cat $ROOTFS/debootstrap/debootstrap.log
        fi
        break;
    fi
    unset CONTINUE
    echo "Installing system"
    /usr/bin/time $CC_DIR/install-system && CONTINUE=1
    if [ -z $CONTINUE ];then break;fi
    unset CONTINUE
    echo "Making squashfs"
    /usr/bin/time $CC_DIR/squashfs && CONTINUE=1
    if [ -z $CONTINUE ];then break;fi
    unset CONTINUE
    if [ -n "$ISOLINUX" ];then
        echo "Installing ISOLINUX"
        /usr/bin/time $CC_DIR/isolinux && CONTINUE=1
        if [ -z $CONTINUE ];then break;fi
        unset CONTINUE
    fi
    if [ -n "$D_I_URL" ];then
        /usr/bin/time $CC_DIR/d-i && CONTINUE=1
    fi
    if [ -z $CONTINUE ];then break;fi
    unset CONTINUE
    echo "Generating image"
    /usr/bin/time $CC_DIR/genisoimage && CONTINUE=1
    if [ -z $CONTINUE ];then break;fi

    unset CONTINUE
    list_rootfs_packages_to_file $TMP/$DISK_ID-publish/$DIST-$VARIANT-$ARCH.list && CONTINUE=1
    
done

if [ -n $RECIPIENT -a -n $PUBLISH_URL ];then
    if [ -z $CONTINUE ];then
        SOURCE=FAIL.txt
        TMESSAGE="$DIST $VARIANT build failed: $PUBLISH_URL";
    else
        SOURCE=SUCCESS.txt
        TMESSAGE="$DIST $VARIANT build successful: $PUBLISH_URL";
    fi
    echo "Sending email to $RECIPIENT"
    sed -e "s/RECIPIENT/$RECIPIENT/g" -e "s|PUBLISH_URL|$PUBLISH_URL|g" -e "s/DIST/$DIST/g" -e "s/VARIANT/$VARIANT/g" < $TEMPLATES_PATH/$SOURCE | sendmail $RECIPIENT 

    if [ -x /usr/bin/ttytter ];then
        /usr/bin/ttytter -status="$TMESSAGE"
    fi
fi

if [ -n $PUBLISH_PATH ];then
    mkdir -p $PUBLISH_PATH/$DISK_ID
    mv $TMP/$DISK_ID-publish/* $PUBLISH_PATH/$DISK_ID
    rm -f $PUBLISH_PATH/current
    ln -s $PUBLISH_PATH/$DISK_ID $PUBLISH_PATH/current
fi

if [ -z $CONTINUE ];then 
exit 1;
fi
